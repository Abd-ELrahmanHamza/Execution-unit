// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2021 14:42:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DecodingCircuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecodingCircuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] cmd;
reg [3:0] in;
reg [3:0] inA;
reg [3:0] inB;
reg [3:0] inC;
// wires                                               
wire [3:0] A;
wire [3:0] B;
wire [1:0] s;
wire selectA;
wire selectB;
wire selectC;

// assign statements (if any)                          
DecodingCircuit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.cmd(cmd),
	.in(in),
	.inA(inA),
	.inB(inB),
	.inC(inC),
	.s(s),
	.selectA(selectA),
	.selectB(selectB),
	.selectC(selectC)
);
initial 
begin 
#1000000 $finish;
end 
// cmd[ 5 ]
initial
begin
	cmd[5] = 1'b0;
	cmd[5] = #200000 1'b1;
	cmd[5] = #200000 1'b0;
end 
// cmd[ 4 ]
initial
begin
	cmd[4] = 1'b0;
	cmd[4] = #300000 1'b1;
	cmd[4] = #200000 1'b0;
end 
// cmd[ 3 ]
initial
begin
	cmd[3] = 1'b0;
	cmd[3] = #200000 1'b1;
	cmd[3] = #100000 1'b0;
end 
// cmd[ 2 ]
initial
begin
	cmd[2] = 1'b0;
	cmd[2] = #100000 1'b1;
	cmd[2] = #100000 1'b0;
	cmd[2] = #200000 1'b1;
	cmd[2] = #100000 1'b0;
end 
// cmd[ 1 ]
initial
begin
	cmd[1] = 1'b0;
	cmd[1] = #100000 1'b1;
	cmd[1] = #100000 1'b0;
	cmd[1] = #100000 1'b1;
	cmd[1] = #200000 1'b0;
end 
// cmd[ 0 ]
initial
begin
	cmd[0] = 1'b0;
end 
// in[ 3 ]
initial
begin
	in[3] = 1'b0;
end 
// in[ 2 ]
initial
begin
	in[2] = 1'b0;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b1;
end 
// inA[ 3 ]
initial
begin
	inA[3] = 1'b0;
end 
// inA[ 2 ]
initial
begin
	inA[2] = 1'b0;
end 
// inA[ 1 ]
initial
begin
	inA[1] = 1'b1;
end 
// inA[ 0 ]
initial
begin
	inA[0] = 1'b1;
end 
// inB[ 3 ]
initial
begin
	inB[3] = 1'b0;
end 
// inB[ 2 ]
initial
begin
	inB[2] = 1'b1;
end 
// inB[ 1 ]
initial
begin
	inB[1] = 1'b1;
end 
// inB[ 0 ]
initial
begin
	inB[0] = 1'b1;
end 
// inC[ 3 ]
initial
begin
	inC[3] = 1'b1;
end 
// inC[ 2 ]
initial
begin
	inC[2] = 1'b1;
end 
// inC[ 1 ]
initial
begin
	inC[1] = 1'b1;
end 
// inC[ 0 ]
initial
begin
	inC[0] = 1'b1;
end 
endmodule

